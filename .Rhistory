echo "# ecoinfo20161021-RainbowLiao" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/NCYUBRD/ecoinfo20161021-RainbowLiao.git
git push -u origin master
data_list <- list.files(path = "D:/凱/生態資訊/data/raw/" , pattern = "auto_hr")
substr(data_list,1,120)
filelist <- lapply(data_list, fread)
library(data.table)
library(stats)
data_list <- list.files(path = "D:/凱/生態資訊/data/raw/" , pattern = "auto_hr")
substr(data_list,1,120)
filelist <- lapply(data_list, fread)
substr(data_list,1,120)
names <- substr(data_list,1,120)
data_list <- list.files(path = "D:/凱/生態資訊/data/raw/" , pattern = "auto_hr")
names <- substr(data_list,1,120)
filelist <- lapply(data_list, fread)
for (i in names) {
filepath <- file.path('D:/凱/生態資訊/data/raw/')
assign(i, read.delim(filepath))
}
filepath <- fildlist(fread('D:/凱/生態資訊/data/raw/'))
filelist <- lapply(data_list, fread)
load("D:/凱/生態資訊/data/raw/200601_auto_hr.txt")
all_data <- list.files("D:/凱/生態資訊/data/raw/" , pattern = "auto_hr", full.names=TRUE)
filelist <- lapply(all_data, fread)
filelist <- lapply(all_data, fread(, skip = 74))
all_data <- list.files("D:/凱/生態資訊/data/raw/" , pattern = "auto_hr", full.names=TRUE)
all_data <- list.files("D:/凱/生態資訊/data/raw/" , pattern = "auto_hr")
filepath <- fread("D:/凱/生態資訊/data/raw/*.txt", skip = 74)
all_files <- list.files("D:/凱/生態資訊/data/raw" , pattern = "auto_hr")
read_data <-  function(x){
data_open_clean <- fread(x, sep="," , skip = 74)
return(data_open_clean)
}
mylist <- lapply(all_files, read_data)
View(read_data)
mydata <- do.call('rbind',mylist)
mylist <- lapply(all_files, read_data)
read_data <-  function(x){
data_open_clean <- fread(x, skip = 74)
return(data_open_clean)
}
mylist <- lapply(all_files, read_data)
mylist <- lapply(all_files, read_data)
all_files <- list.files("D:/凱/生態資訊/data/raw" , pattern = "auto_hr")
read_data <-  function(x){
data_open_clean <- fread(x, skip = 74)
return(data_open_clean)
}
mylist <- lapply(all_files, read_data)
do.call("complex", list(imag = 1:3))
## if we already have a list (e.g., a data frame)
## we need c() to add further arguments
tmp <- expand.grid(letters[1:2], 1:3, c("+", "-"))
do.call("paste", c(tmp, sep = ""))
do.call(paste, list(as.name("A"), as.name("B")), quote = TRUE)
## examples of where objects will be found.
A <- 2
f <- function(x) print(x^2)
env <- new.env()
assign("A", 10, envir = env)
assign("f", f, envir = env)
f <- function(x) print(x)
f(A)                                      # 2
do.call("f", list(A))                     # 2
do.call("f", list(A), envir = env)        # 4
do.call(f, list(A), envir = env)          # 2
do.call("f", list(quote(A)), envir = env) # 100
do.call(f, list(quote(A)), envir = env)   # 10
do.call("f", list(as.name("A")), envir = env) # 100
eval(call("f", A))                      # 2
eval(call("f", quote(A)))               # 2
eval(call("f", A), envir = env)         # 4
eval(call("f", quote(A)), envir = env)  # 100
View(tmp)
View(f)
View(read_data)
View(f)
all_files <- list.files("D:/凱/生態資訊/data/raw" , pattern = "auto_hr")
for (i in all_files){
temp.data <- fread(i)
data <- data.table(rbind(data,temp.data))
if (k %% 100 == 0)
print(k/length(all_files))
k<-k+1
}
all_files <- list.files("D:/凱/生態資訊/data/raw/200601_auto_hr.txt" , pattern = "auto_hr")
for (i in all_files){
temp.data <- fread(i)
data <- data.table(rbind(data,temp.data))
if (k %% 100 == 0)
print(k/length(all_files))
k<-k+1
}
read_data <-  function(x){
data_open_clean <- fread(x, skip = 74)
return(data_open_clean)
}
mylist <- lapply(all_files, read_data)
mydata <- do.call('rbind',mylist)
View(read_data)
all_files <- list.files("D:/凱/生態資訊/data/raw/*.txt" , pattern = "auto_hr")
read_data <-  function(x){
data_open_clean <- fread(x, skip = 74)
return(data_open_clean)
}
for (i in all_files){
temp.data <- fread(i)
data <- data.table(rbind(data,temp.data))
if (k %% 100 == 0)
print(k/length(all_files))
k<-k+1
}
mylist <- lapply(all_files, read_data)
mydata <- do.call('rbind',mylist)
all_files <- list.files("D:/凱/生態資訊/data/raw/*.txt" , pattern = "auto_hr")
all_files <- list.files("D:/凱/生態資訊/data/raw/*.txt" , pattern = "auto_hr")
substr(all_files,1,120)
read_data <-  function(x){
data_open_clean <- fread(x, skip = 74)
return(data_open_clean)
}
for (i in all_files){
temp.data <- fread(i)
data <- data.table(rbind(data,temp.data))
if (k %% 100 == 0)
print(k/length(all_files))
k<-k+1
}
mylist <- lapply(all_files, read_data)
mydata <- do.call('rbind',mylist)
View(read_data)
mylist <- lapply(all_files, read_data)
substr(all_files,1,120)
all_files <- list.files("D:/凱/生態資訊/data/raw/" , pattern = "auto_hr")
200601_auto_hr.txt
all_files <- list.files("D:/凱/生態資訊/data/raw/" , pattern = "auto_hr")
substr(all_files,1,120)
read_data <-  function(x){
data_open_clean <- fread(x, skip = 74)
return(data_open_clean)
}
for (i in all_files){
temp.data <- fread(i)
data <- data.table(rbind(data,temp.data))
if (k %% 100 == 0)
print(k/length(all_files))
k<-k+1
}
mylist <- lapply(all_files, read_data)
mydata <- do.call('rbind',mylist)
1 %% 100
2 %% 100
for (i in all_files){
temp.data <- fread(i)
data <- data.table(rbind(data,temp.data))
}
for (i in substr){
temp.data <- fread(i)
data <- data.table(rbind(data,temp.data))
}
for (i in all_files){
temp.data <- fread(i)
data <- data.table(rbind(data,temp.data))
}
read_data <-  function(x){
data_open_clean <- read.csv(x, skip = 74)
return(data_open_clean)
}
for (i in all_files){
temp.data <- read.csv(i)
data <- data.table(rbind(data,temp.data))
}
##  前置作業
{
setwd('D:/凱/生態資訊/git')
# 輸入資料 (tab 可顯示list 路徑)
cwb <- fread('D:/凱/生態資訊/data/raw/200601_auto_hr.txt', skip=74
, na.strings = c('-9991','-9995','-9996','-9997','-9998','-9999'))
# 設定欄位名稱(colnames <- c(固定格式)
#              setnames(目標,欄位,colnames)
colnames <- c("stno", "yyyymmddhr","PS01", "TX01", "RH01","WD01","WD02", "PP01",
"SS01")
setnames(cwb,1:9,colnames)
# 時間格式化(strptime(目標,'格式'))
# 建立新欄位 cwb[, timestamps:=as.POSIXct(strptime(yyyymmddhr,'%Y%m%d%H'))]
strptime(cwb$yyyymmddhr,'%Y%m%d%H')
cwb[,timestamp:=as.POSIXct(strptime(yyyymmddhr-1,'%Y%m%d%H'))]
}
## 開始aggregate(表示式,資料集,函數)
{
# 先抓出([ == ])目標測站'C0M530'資料，並整理時間標記(format.Date)去除hr
C0M530 <- cwb[cwb$stno == 'C0M530']
format.Date(C0M530$timestamp, '%Y-%m-%d')
C0M530[, date:= format.Date(timestamp, '%Y-%m-%d')]
# 設計funtion,計算mean(注意目前資料讀取為文字檔，需轉換成數值(as.numeric())，
#                                                   並去除'NA' = na.rm = TRUE)
mean_omit_na <- function(x){
x <- as.numeric(x)
return (mean(x, na.rm = T))
}
## DEMO: aggregate(iris$Petal.Length, by = list(iris$Species), FUN = mean)
}
### a.2006年每日日均溫daliy tmper (DTM)
{mean_DTM <- aggregate(as.numeric(C0M530$TX01), by = list(C0M530$date),
FUN = mean_omit_na)
}
### b.2006年每日最低溫、最高溫Daliy Max/ min tmper (DMaxT/DminT)
{# 寫funtion 判定最大最小值
Max_T <- function(x){
max(x, na.rm = TRUE)
}
min_T <-  function(x){
min(x, na.rm = TRUE)
}
## use it
DMaxT <- aggregate(C0M530$TX01, by = list(C0M530$date), FUN = Max_T)
DminT <- aggregate(C0M530$TX01, by = list(C0M530$date), FUN = min_T)
}
View(mean_DTM)
mean(mean_DTM)
mean_MTM(mean_DTM)
mean_MTM <- aggregate(as.numeric(mean_DTM$x), by = list(mean_DTM$Group.1),
FUN = mean_omit_na)
View(mean_MTM)
View(mean_DTM)
mean_MTM <- aggregate(as.numeric(mean_DTM$x), FUN = mean_omit_na)
mean_MTM <- aggregate(as.numeric(mean_DTM$x), by = list(mean_DTM), FUN = mean_omit_na)
mean_MTM <- aggregate(as.numeric(mean_DTM$x), by = list(mean_DTM$x), FUN = mean_omit_na)
View(mean_MTM)
C0M530[, month:= format.Date(timestamp, '%Y-%m')]
View(C0M530)
mean_MTM <- aggregate(as.numeric(mean_DTM$x), by = list(C0M530$month), FUN = mean_omit_na)
mean_MTM <- aggregate(as.numeric(C0M530$TX01), by = list(C0M530$month), FUN = mean_omit_na)
View(mean_MTM)
sum_rain <- function(x){
x <- numeric(x)
return(sum(x, na.rm = T)
}
sum_rain <- function(x){
x <- numeric(x)
return(sum(x, na.rm = T)
}
sum_rain <- function(x){
x <- numeric(x)
return(sum(x, na.rm = T))
}
sum <- function(x){
x <- numeric(x)
return(sum(x, na.rm = T))
}
sum_mr <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum)
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum)
sum <- function(x){
x <- numeric(x)
return(sum(x))
}
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum)
FUN = sum)
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum)
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum)
sum <- function(x){
x <- numeric(x)
return(sum(x, na.rm = F))
}
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum)
sum_r <- function(x){
x <- numeric(x)
return(sum(x, na.rm = F))
}
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum_r)
sum_r(1,2,3,4,5,6,7,8)
sum_r(c(1,2,3,4,5,6,7,8))
sum_r(c(1,2,3,4,5,6,7,8))
sum_r(c(1,2,3,4,5,6,7,8))
sum_r <- function(x){
x <- numeric(x)
return(sum(x, na.rm = F))
}
sum_r(c(1,2,3,4,5,6,7,8))
sum(x)
sum(C0M530$PP01)
sum(aggregate(as.numeric(C0M530$PP01)), by = list(C0M530$month) )
sum(aggregate(as.numeric(C0M530$PP01)), by = list(C0M530$ston) )
sum_r(c(1,2,3,4,5,6,7,8))
sum_r <- function(x){
x <- numeric(x)
return(summary(x, na.rm = F))
}
sum_r(c(1,2,3,4,5,6,7,8))
x <- c(1, 2, 3,, 4)
x <- c(1, 2, 3, "NA", 4)
sum(x)
numeric(x)
numeric(x, length = 5)
x <- c(1, 2, 3, 4)
sum(x)
summary(x)
sum(1:5)
x <- 1:5
sum(x)
sum_r <- function(x){
x <- numeric(x)
return(colMeans(x, na.rm = F))
}
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum_r)
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$data),
FUN = sum_r)
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$PP01),
FUN = sum_r)
colMeans(C0M530$PP01)
library(sum)
## Pass a vector to sum, and it will add the elements together.
sum(1:5)
## Pass several numbers to sum, and it also adds the elements.
sum(1, 2, 3, 4, 5)
## In fact, you can pass vectors into several arguments, and everything gets added.
sum(1:2, 3:5)
## If there are missing values, the sum is unknown, i.e., also missing, ....
sum(1:5, NA)
## ... unless  we exclude missing values explicitly:
sum(1:5, NA, na.rm = TRUE)
sum_r <- function(x){
x <- numeric(x)
return(colSums(x, na.rm = F))
}
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum_r)
library(plyr)
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = 'sum')
View(sum_SMR)
sum_r <- function(x){
return(sum(x, na.rm = T))
}
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = 'sum_r')
sum_r <- function(x){
return(sum(x))
}
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = 'sum_r')
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = 'sum')
View(sum_SMR)
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = 'summary')
View(sum_SMR)
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = Summary.numeric_version)
sum_omit_na <- function(x){
x <- as.numeric(x)
return (sum(x, na.rm = T))
}
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum_omit_na)
sum_omit_na <- function(x){
x <- as.numeric(x)
return (sum(x, na.rm = F))
}
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum_omit_na)
sum_omit_na <- function(x){
x <- as.numeric(x)
return (sum(x))
}
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum_omit_na)
sum_omit_na <- function(x){
x <- as.numeric(x)
return (sum(x,na.rm = FALSE))
}
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum_omit_na)
sum_omit_na <- function(x){
x <- as.numeric(x)
return (sum( x, na.rm = TRUE))
}
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum_omit_na)
View(sum_SMR)
sum_omit_na <- function(x){
x <- as.numeric(x)
return (sum(x))
}
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum_omit_na)
## Pass a vector to sum, and it will add the elements together.
sum(1:5)
## Pass several numbers to sum, and it also adds the elements.
sum(1, 2, 3, 4, 5)
## In fact, you can pass vectors into several arguments, and everything gets added.
sum(1:2, 3:5)
## If there are missing values, the sum is unknown, i.e., also missing, ....
sum(1:5, NA)
## ... unless  we exclude missing values explicitly:
sum(1:5, NA, na.rm = TRUE)
library(base)
## Pass a vector to sum, and it will add the elements together.
sum(1:5)
## Pass several numbers to sum, and it also adds the elements.
sum(1, 2, 3, 4, 5)
## In fact, you can pass vectors into several arguments, and everything gets added.
sum(1:2, 3:5)
## If there are missing values, the sum is unknown, i.e., also missing, ....
sum(1:5, NA)
## ... unless  we exclude missing values explicitly:
sum(1:5, NA, na.rm = TRUE)
sum_SMR <- aggregate(as.numeric(C0M530$SS01), by = list(C0M530$month),
FUN = sum_omit_na)
sum_SMR <- aggregate(as.numeric(C0M530$PP01), by = list(C0M530$month),
FUN = sum_omit_na)
sum(1:5)
